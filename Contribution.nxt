/*
 * Copyright (c) 2006 Whitestein Technologies AG.
 * All rights reserved.
 *
 */

(notation
	(onarrange
		(mofsetattr (mofref view 'StereotypeLabel') 'Text' '')
		(mofsetattr (mofref view 'StereotypeLabel') 'Visible' false)
	    (arrangeObject view)
	)
	(ondraw
	    (setdefaultstyle)
		(setpenstyle 'psSolid')
	    (polyline points)

		(set nl (mofref view 'NameLabel'))
		(drawobject nl)

		(if (= true (mofattr (mofref view 'PropertyLabel') 'Visible'))
			(drawobject (mofref view 'PropertyLabel'))
		)

	    //consts
		(set SPACE 6) //space between arrows //space between arrow and bar = 2*SPACE
		(set ARROW 10) //length of arrow
		(set RADIUS2 7)
		(set pi (/ 3141592 1000000))
		(set pi2 (/ pi 2))

		//end points
		(set BX (ptatx (- (ptcount) 2)))
		(set BY (ptaty (- (ptcount) 2)))
		(set EX (ptatx (- (ptcount) 1)))
		(set EY (ptaty (- (ptcount) 1)))

		//angle
		(set A (- EX  BX))
		(set B (- EY  BY))


		//iterate to find the correct angle
		(set angle 0)
		(if (= A 0)
			(set angle pi2)
			(sequence
				(set z (/ B A))
				(if (< (+ z 0) 0)
					(set z (* -1 z))
				)
				(for i 1 90
					(sequence
						(set tang (tan (* (/ pi2 90) i)))
						(if (> (+ z 0) (+ tang 0))
							(set angle (* (/ pi2 90) i))
						)
						(set i (+ i 4))
					)
				)

			)
		)

		//count the end of arrow lines
		(set angle1 (+ angle (/ pi2 2))) //arrow angle = 45
		(set angle2 (- angle (/ pi2 2)))
		(set MOVEX1 (* (cos angle1) ARROW))
		(set MOVEY1 (* (sin angle1) ARROW))
		(set MOVEX2 (* (cos angle2) ARROW))
		(set MOVEY2 (* (sin angle2) ARROW))
		(if (> A 0) (set MOVEX1 (* MOVEX1 -1)))
		(if (> B 0) (set MOVEY1 (* MOVEY1 -1)))
		(if (> A 0) (set MOVEX2 (* MOVEX2 -1)))
		(if (> B 0) (set MOVEY2 (* MOVEY2 -1)))
		(set MOVEX (* (cos angle) SPACE))
		(set MOVEY (* (sin angle) SPACE))
		(if (> A 0) (set MOVEX (* MOVEX -1)))
		(if (> B 0) (set MOVEY (* MOVEY -1)))
		(set MOVERX (* (cos angle) RADIUS2))
		(set MOVERY (* (sin angle) RADIUS2))
		(if (> A 0) (set MOVERX (* MOVERX -1)))
		(if (> B 0) (set MOVERY (* MOVERY -1)))

		(set SX EX)
		(set SY EY)
		//draw circle
		(set bck (tagval model 'AML' 'Contribution' 'beneficiaryConstraintKind'))
		(if (=  bck 'commit')
			(sequence
				(set SX (+ SX MOVERX))
				(set SY (+ SY MOVERY))
				(setbrushcolor 'clBlack')
				(ellipse (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
				(setdefaultstyle)
				(setpenstyle 'psSolid')
				(set SX (+ SX MOVERX))
				(set SY (+ SY MOVERY))
			)		
			(if (= bck 'pre')
				(sequence
					(set SX (+ SX MOVERX))
					(set SY (+ SY MOVERY))
					(ellipse (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
					(set SX (+ SX MOVERX))
					(set SY (+ SY MOVERY))
				)
				(if (= bck 'commpre')
					(sequence
						(set SX (+ SX MOVERX))
						(set SY (+ SY MOVERY))
						(ellipse (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
						(setbrushcolor 'clBlack')
						(pie (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2) SX (- SY RADIUS2) SX (+ SY RADIUS2))
						(setdefaultstyle)
						(setpenstyle 'psSolid')
						(set SX (+ SX MOVERX))
						(set SY (+ SY MOVERY))
					)
					(if (= bck 'inv')
						(sequence
							(set SX (+ SX MOVERX))
							(set SY (+ SY MOVERY))
							(ellipse (- SX RADIUS2) (- SY RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
							(setbrushcolor 'clBlack')
							(ellipse (- SX -3 RADIUS2) (- SY -3 RADIUS2) (+ SX -3 RADIUS2) (+ SY -3 RADIUS2))
							(setdefaultstyle)
							(setpenstyle 'psSolid')
							(set SX (+ SX MOVERX))
							(set SY (+ SY MOVERY))
						)
						(if (= bck 'cancel')
							(sequence
								(set SX (+ SX MOVERX))
								(set SY (+ SY MOVERY))
								(ellipse (- SX RADIUS2) (- SY RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
								(setbrushcolor 'clBlack')
								(polygon (pt (- SX 5) (- SY 4)) (pt (- SX 4) (- SY 5)) (pt (+ SX 5) (+ SY 4)) (pt (+ SX 4) (+ SY 5)))
								(polygon (pt (- SX 5) (+ SY 4)) (pt (- SX 4) (+ SY 5)) (pt (+ SX 5) (- SY 4)) (pt (+ SX 4) (- SY 5)))
								(setdefaultstyle)
								(setpenstyle 'psSolid')
								(set SX (+ SX MOVERX))
								(set SY (+ SY MOVERY))
							)						
							(if (= bck 'post')
								(sequence
									(set SX (+ SX MOVERX))
									(set SY (+ SY MOVERY))
									(ellipse (- SX RADIUS2) (- SY RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
									(setbrushcolor 'clBlack')
									(rect (- SX -1 RADIUS2) (- SY 1) (+ SX -1 RADIUS2) (+ SY 1))
									(setdefaultstyle)
									(setpenstyle 'psSolid')
									(set SX (+ SX MOVERX))
									(set SY (+ SY MOVERY))
								)
							)
						)
					)
				)
			)
		)

		//first arrow
		(set SX1 (+ SX MOVEX1))
		(set SY1 (+ SY MOVEY1))
		(set SX2 (+ SX MOVEX2))
		(set SY2 (+ SY MOVEY2))

		(line SX SY SX1 SY1)
		(line SX SY SX2 SY2)

		//move arrow head in the direction of link
		(set SX (+ SX MOVEX))
		(set SY (+ SY MOVEY))

		//second arrow
		(set SX1 (+ SX MOVEX1))
		(set SY1 (+ SY MOVEY1))
		(set SX2 (+ SX MOVEX2))
		(set SY2 (+ SY MOVEY2))

		(line SX SY SX1 SY1)
		(line SX SY SX2 SY2)

		//move points draw bar
		(if (= (tagval model 'AML' 'Contribution' 'kind') 'neccessary')   //constraints = TaggedValueSet
		  (sequence
				(set SX1 (+ SX1 MOVEX MOVEX))
				(set SY1 (+ SY1 MOVEY MOVEY))
				(set SX2 (+ SX2 MOVEX MOVEX))
				(set SY2 (+ SY2 MOVEY MOVEY))
				(line SX1 SY1 SX2 SY2)
		  )
		)

		// to draw the arrow on the other side

		//end points
		(set BX (ptatx 1))
		(set BY (ptaty 1))
		//(set EX (ptatx (- (ptcount) 1)))
		(set EX (ptatx 0))
		(set EY (ptaty 0))

		//angle
		(set A (- EX  BX))
		(set B (- EY  BY))

		//iterate to find the correct angle
		(set angle 0)
		(if (= A 0)
			(set angle pi2)
			(sequence
				(set z (/ B A))
				(if (< z 0)
					(set z (* -1 z))
				)
				(for i 1 90
					(sequence
						(set tang (tan (* (/ pi2 90) i)))
						(if (> z tang)
							(set angle (* (/ pi2 90) i))
						)
						(set i (+ i 4))
					)
				)
			)
		)

		//count the end of arrow lines
		//count the end of arrow lines
		(set angle1 (+ angle (/ pi2 2))) //arrow angle = 45
		(set angle2 (- angle (/ pi2 2)))
		(set MOVEX1 (* (cos angle1) ARROW))
		(set MOVEY1 (* (sin angle1) ARROW))
		(set MOVEX2 (* (cos angle2) ARROW))
		(set MOVEY2 (* (sin angle2) ARROW))
		(if (> A 0) (set MOVEX1 (* MOVEX1 -1)))
		(if (> B 0) (set MOVEY1 (* MOVEY1 -1)))
		(if (> A 0) (set MOVEX2 (* MOVEX2 -1)))
		(if (> B 0) (set MOVEY2 (* MOVEY2 -1)))
		(set MOVEX (* (cos angle) SPACE))
		(set MOVEY (* (sin angle) SPACE))
		(if (> A 0) (set MOVEX (* MOVEX -1)))
		(if (> B 0) (set MOVEY (* MOVEY -1)))
		(set MOVERX (* (cos angle) RADIUS2))
		(set MOVERY (* (sin angle) RADIUS2))
		(if (> A 0) (set MOVERX (* MOVERX -1)))
		(if (> B 0) (set MOVERY (* MOVERY -1)))

		(set SX EX)
		(set SY EY)
		//draw circle
		(set cck (tagval model 'AML' 'Contribution' 'contributorConstraintKind'))
		(if (= cck 'commit')
			(sequence
				(set SX (+ SX MOVERX))
				(set SY (+ SY MOVERY))
				(setbrushcolor 'clBlack')
				(ellipse (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
				(setdefaultstyle)
				(setpenstyle 'psSolid')
				(set SX (+ SX MOVERX))
				(set SY (+ SY MOVERY))
			)	
			(if (= cck 'pre')
				(sequence
					(set SX (+ SX MOVERX))
					(set SY (+ SY MOVERY))
					(ellipse (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
					(set SX (+ SX MOVERX))
					(set SY (+ SY MOVERY))
				)
				(if (= cck 'commpre')
					(sequence
						(set SX (+ SX MOVERX))
						(set SY (+ SY MOVERY))
						(ellipse (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
						(setbrushcolor 'clBlack')
						(pie (- SX RADIUS2) (- SY  RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2) SX (- SY RADIUS2) SX (+ SY RADIUS2))
						(setdefaultstyle)
						(setpenstyle 'psSolid')
						(set SX (+ SX MOVERX))
						(set SY (+ SY MOVERY))
					)
					(if (= cck 'inv')
						(sequence
							(set SX (+ SX MOVERX))
							(set SY (+ SY MOVERY))
							(ellipse (- SX RADIUS2) (- SY RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
							(setbrushcolor 'clBlack')
							(ellipse (- SX -3 RADIUS2) (- SY -3 RADIUS2) (+ SX -3 RADIUS2) (+ SY -3 RADIUS2))
							(setdefaultstyle)
							(setpenstyle 'psSolid')
							(set SX (+ SX MOVERX))
							(set SY (+ SY MOVERY))
						)
						(if (= cck 'cancel')
							(sequence
								(set SX (+ SX MOVERX))
								(set SY (+ SY MOVERY))
								(ellipse (- SX RADIUS2) (- SY RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
								(setbrushcolor 'clBlack')
								(polygon (pt (- SX 5) (- SY 4)) (pt (- SX 4) (- SY 5)) (pt (+ SX 5) (+ SY 4)) (pt (+ SX 4) (+ SY 5)))
								(polygon (pt (- SX 5) (+ SY 4)) (pt (- SX 4) (+ SY 5)) (pt (+ SX 5) (- SY 4)) (pt (+ SX 4) (- SY 5)))
								(setdefaultstyle)
								(setpenstyle 'psSolid')
								(set SX (+ SX MOVERX))
								(set SY (+ SY MOVERY))
							)
							(if (= cck 'post')
								(sequence
									(set SX (+ SX MOVERX))
									(set SY (+ SY MOVERY))
									(ellipse (- SX RADIUS2) (- SY RADIUS2) (+ SX RADIUS2) (+ SY RADIUS2))
									(setbrushcolor 'clBlack')
									(rect (- SX -1 RADIUS2) (- SY 1) (+ SX -1 RADIUS2) (+ SY 1))
									(setdefaultstyle)
									(setpenstyle 'psSolid')
									(set SX (+ SX MOVERX))
									(set SY (+ SY MOVERY))
								)
							)
						)
					)
				)
			)
		)
		//enddrawcircle
		(if (= (tagval model 'AML' 'Contribution' 'kind') 'iff')
			(sequence

				//first arrow
				(set SX1 (+ SX MOVEX1))
				(set SY1 (+ SY MOVEY1))
				(set SX2 (+ SX MOVEX2))
				(set SY2 (+ SY MOVEY2))

				(line SX SY SX1 SY1)
				(line SX SY SX2 SY2)

				//move arrow head in the direction of link
				(set SX (+ SX MOVEX))
				(set SY (+ SY MOVEY))

				//second arrow
				(set SX1 (+ SX MOVEX1))
				(set SY1 (+ SY MOVEY1))
				(set SX2 (+ SX MOVEX2))
				(set SY2 (+ SY MOVEY2))

				(line SX SY SX1 SY1)
				(line SX SY SX2 SY2)
			)
	    )
	)
)